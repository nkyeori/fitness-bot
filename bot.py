import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import os, json

# ===== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø =====
API_TOKEN = os.getenv("API_TOKEN")   # ‚ö†Ô∏è –ß–∏—Ç–∞—î–º–æ —Ç–æ–∫–µ–Ω –∑ Config Vars
MONO_URL = os.getenv("MONO_URL")     # ‚ö†Ô∏è –ß–∏—Ç–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∑ Config Vars
GOOGLE_CREDS = os.getenv("GOOGLE_CREDS")  # ‚ö†Ô∏è –¢–≤–æ—ó JSON –∫—Ä–µ–¥–µ–Ω—à—ñ–∞–ª–∏

if not API_TOKEN:
    raise ValueError("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ API_TOKEN —É Config Vars!")
if not MONO_URL:
    raise ValueError("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ MONO_URL —É Config Vars!")
if not GOOGLE_CREDS:
    raise ValueError("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ GOOGLE_CREDS —É Config Vars!")

# Google Sheets
creds_json = json.loads(GOOGLE_CREDS)
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
]
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_json, scope)
client = gspread.authorize(creds)

# ‚ö†Ô∏è –∑–∞–º—ñ–Ω–∏ ID –Ω–∞ —Å–≤—ñ–π –∑ Google Sheets
spreadsheet = client.open_by_key("1NafZ0VmtlMzUvV5vujoiK4x3y0PEop7wJIzYXAlfS5E")
sheet = spreadsheet.sheet1

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –ë–æ—Ç —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
scheduler = AsyncIOScheduler()
scheduler.start()

# –¢–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_data = {}

# ===== –û–ë–†–û–ë–ù–ò–ö–ò =====
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_data.clear()
    await message.answer("–ü—Ä–∏–≤—ñ—Ç üëã –Ø —Ç–≤—ñ–π —Ñ—ñ—Ç–Ω–µ—Å-–±–æ—Ç!\n\n–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è:")

@dp.message_handler(lambda msg: msg.text and "name" not in user_data)
async def get_name(message: types.Message):
    user_data["name"] = message.text
    await message.answer("–ß—É–¥–æ–≤–æ ‚úÖ –¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")

@dp.message_handler(lambda msg: msg.text and msg.text.isdigit() and "phone" not in user_data)
async def get_phone(message: types.Message):
    user_data["phone"] = message.text
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üçé –•–∞—Ä—á—É–≤–∞–Ω–Ω—è", "üí™ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", "üî• All In")
    await message.answer("–í–∏–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –ø–æ—Å–ª—É–≥:", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text in ["üçé –•–∞—Ä—á—É–≤–∞–Ω–Ω—è", "üí™ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", "üî• All In"])
async def get_package(message: types.Message):
    user_data["package"] = message.text
    user_id = message.from_user.id

    # –ó–∞–ø–∏—Å —É Google Sheets
    sheet.append_row([user_data["name"], user_data["phone"], user_data["package"], str(datetime.now().date()), str(user_id)])

    # –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å
    await message.answer(
        f"–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n"
        f"–¢–µ–ø–µ—Ä —É —Ç–µ–±–µ —î 7 –¥–Ω—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É üéÅ\n"
        f"–Ø –Ω–∞–≥–∞–¥–∞—é –ø—Ä–æ –æ–ø–ª–∞—Ç—É –Ω–∞ 8-–π –¥–µ–Ω—å üòâ"
    )

    # –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await message.answer("–û—á—ñ–∫—É–π –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —Ç—Ä–µ–Ω–µ—Ä–∞ üì©")
    
    # –ü–ª–∞–Ω—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ 8-–π –¥–µ–Ω—å
    run_date = datetime.now() + timedelta(days=7)

    async def send_payment():
        keyboard = types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üí≥ –ü—Ä–∏–¥–±–∞—Ç–∏ –ø–∞–∫–µ—Ç", url=MONO_URL)
        )
        await bot.send_message(
            user_id,
            "–¢–≤—ñ–π –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–∏–≤—Å—è üéâ\n"
            "–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ‚Äî –æ–±–µ—Ä–∏ –ø–∞–∫–µ—Ç —ñ –æ–ø–ª–∞—Ç–∏:",
            reply_markup=keyboard
        )

    scheduler.add_job(send_payment, "date", run_date=run_date)
    user_data.clear()

# ===== –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –û–ü–õ–ê–¢–ò =====
PRIVATE_CHANNEL_LINK = os.getenv("PRIVATE_CHANNEL_LINK") or "https://t.me/+—Ç–≤—ñ–π_–∫–∞–Ω–∞–ª"

@dp.message_handler(lambda msg: msg.text.lower() == "–æ–ø–ª–∞—Ç–∏–≤")
async def confirm_payment(message: types.Message):
    await message.answer(
        "–î—è–∫—É—é –∑–∞ –æ–ø–ª–∞—Ç—É üôè\n\n"
        "–û—Å—å —Ç–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–∞–Ω–∞–ª üëá\n"
        f"{PRIVATE_CHANNEL_LINK}"
    )

# ===== –°–¢–ê–†–¢ –ë–û–¢–ê =====
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
