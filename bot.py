import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import os, json

# ===== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø =====
API_TOKEN = os.getenv("API_TOKEN")   # ‚ö†Ô∏è –ß–∏—Ç–∞—î–º–æ —Ç–æ–∫–µ–Ω –∑ Config Vars
MONO_URL = os.getenv("MONO_URL")     # ‚ö†Ô∏è –ß–∏—Ç–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∑ Config Vars
GOOGLE_CREDS = os.getenv("GOOGLE_CREDS")  # ‚ö†Ô∏è –¢–≤–æ—ó JSON –∫—Ä–µ–¥–µ–Ω—à—ñ–∞–ª–∏

if not API_TOKEN:
    raise ValueError("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ API_TOKEN —É Config Vars!")
if not MONO_URL:
    raise ValueError("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ MONO_URL —É Config Vars!")
if not GOOGLE_CREDS:
    raise ValueError("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ GOOGLE_CREDS —É Config Vars!")

# Google Sheets
creds_json = json.loads(GOOGLE_CREDS)
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive.file",
    "https://www.googleapis.com/auth/drive"
]
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_json, scope)
client = gspread.authorize(creds)

# ‚ö†Ô∏è –∑–∞–º—ñ–Ω–∏ ID –Ω–∞ —Å–≤—ñ–π –∑ Google Sheets
spreadsheet = client.open_by_key("1NafZ0VmtlMzUvV5vujoiK4x3y0PEop7wJIzYXAlfS5E")
sheet = spreadsheet.sheet1

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –ë–æ—Ç —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
scheduler = AsyncIOScheduler()
scheduler.start()

# –¢–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_data = {}

# ===== –û–ë–†–û–ë–ù–ò–ö–ò =====
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_data.clear()
    await message.answer("–ü—Ä–∏–≤—ñ—Ç üëã –Ø —Ç–≤—ñ–π —Ñ—ñ—Ç–Ω–µ—Å-–±–æ—Ç!\n\n–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è:")

@dp.message_handler(lambda msg: msg.text and "name" not in user_data)
async def get_name(message: types.Message):
    user_data["name"] = message.text
    await message.answer("–ß—É–¥–æ–≤–æ ‚úÖ –¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")

@dp.message_handler(lambda msg: msg.text and msg.text.isdigit() and "phone" not in user_data)
async def get_phone(message: types.Message):
    user_data["phone"] = message.text
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üçé –•–∞—Ä—á—É–≤–∞–Ω–Ω—è", "üí™ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", "üî• All In")
    await message.answer("–í–∏–±–µ—Ä–∏ –ø–∞–∫–µ—Ç –ø–æ—Å–ª—É–≥:", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text in ["üçé –•–∞—Ä—á—É–≤–∞–Ω–Ω—è", "üí™ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è", "üî• All In"])
async def get_package(message: types.Message):
    user_data["package"] = message.text
    user_id = message.from_user.id

    # --- –ë–∞–∑–æ–≤—ñ —Ü—ñ–Ω–∏ ---
    base_prices = {
        "üçé –•–∞—Ä—á—É–≤–∞–Ω–Ω—è": 2000,
        "üí™ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è": 2000,
        "üî• All In": 3500
    }
    base_price = base_prices[user_data["package"]]

    # --- –†–∞—Ö—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –æ–ø–ª–∞—Ç–æ—é ---
    all_rows = sheet.get_all_records()
    paid_clients = sum(1 for row in all_rows if str(row.get("–û–ø–ª–∞—á–µ–Ω–æ", "")).lower() in ["—Ç–∞–∫", "yes", "paid"])

    # --- –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ —Ü—ñ–Ω—É ---
    final_price = base_price
    if paid_clients < 15:   # –ø–µ—Ä—à—ñ 15 –æ–ø–ª–∞—Ç –æ—Ç—Ä–∏–º—É—é—Ç—å –∑–Ω–∏–∂–∫—É
        final_price = int(base_price * 0.8)

    # --- –ó–∞–ø–∏—Å —É —Ç–∞–±–ª–∏—Ü—é (–ø–æ–∫–∏ "–û–ø–ª–∞—á–µ–Ω–æ" –ø—É—Å—Ç–µ) ---
    sheet.append_row([
        user_data["name"],
        user_data["phone"],
        user_data["package"],
        str(datetime.now().date()),
        str(user_id),
        str(final_price),
        ""  # –∫–æ–ª–æ–Ω–∫–∞ "–û–ø–ª–∞—á–µ–Ω–æ" (–ø–æ—Ä–æ–∂–Ω—è –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ)
    ])

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–±–Ω–∏–π –ø–µ—Ä—ñ–æ–¥
    await message.answer(
        "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úÖ\n"
        "–¢–µ–ø–µ—Ä —É —Ç–µ–±–µ —î 7 –¥–Ω—ñ–≤ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É üéÅ\n"
        "–Ø –Ω–∞–≥–∞–¥–∞—é –ø—Ä–æ –æ–ø–ª–∞—Ç—É –Ω–∞ 8-–π –¥–µ–Ω—å üòâ"
    )
    await message.answer("‚è≥ –û—á—ñ–∫—É–π –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ —Ç—Ä–µ–Ω–µ—Ä–∞ üì©")

    # --- –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É ---
    run_date = datetime.now() + timedelta(days=7)

    async def send_first_payment():
        keyboard = types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üí≥ –ü—Ä–∏–¥–±–∞—Ç–∏ –ø–∞–∫–µ—Ç", url=f"{MONO_URL}?amount={final_price*100}")
        )

        if final_price < base_price:
            text = (
                "üéâ –í—ñ—Ç–∞—é! –í–∏ —Å–µ—Ä–µ–¥ –ø–µ—Ä—à–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ —ñ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –∑–Ω–∏–∂–∫—É -20%!\n\n"
                f"–¢–µ–ø–µ—Ä –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–≤–æ–≥–æ –ø–∞–∫–µ—Ç–∞ —Å–∫–ª–∞–¥–∞—î: {final_price} –≥—Ä–Ω (–∑–∞–º—ñ—Å—Ç—å {base_price} –≥—Ä–Ω).\n\n"
                "–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá"
            )
        else:
            text = (
                "–¢–≤—ñ–π –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–∏–≤—Å—è üéâ\n"
                f"–í–∞—Ä—Ç—ñ—Å—Ç—å —Ç–≤–æ–≥–æ –ø–∞–∫–µ—Ç–∞: {final_price} –≥—Ä–Ω\n\n"
                "–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá"
            )

        await bot.send_message(user_id, text, reply_markup=keyboard)

    scheduler.add_job(send_first_payment, "date", run_date=run_date)

    # --- –î–∞–ª—ñ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω—ñ 4 —Ç–∏–∂–Ω—ñ ---
    async def send_regular_reminder():
        keyboard = types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", url=f"{MONO_URL}?amount={final_price*100}")
        )
        await bot.send_message(
            user_id,
            f"‚ö†Ô∏è –ù–∞–≥–∞–¥—É—é, —â–æ —Ç–≤–æ—è –ø—ñ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è –∑–∞–≤—Ç—Ä–∞.\n"
            f"–í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è: {final_price} –≥—Ä–Ω",
            reply_markup=keyboard
        )

    scheduler.add_job(send_regular_reminder, "date", run_date=datetime.now() + timedelta(days=27))
    scheduler.add_job(send_regular_reminder, "interval", weeks=4, start_date=datetime.now() + timedelta(days=27))

    user_data.clear()

# ===== –°–¢–ê–¢–£–° –û–ü–õ–ê–¢–ò =====
PRIVATE_CHANNEL_LINK = os.getenv("PRIVATE_CHANNEL_LINK") or "https://t.me/+—Ç–≤—ñ–π_–∫–∞–Ω–∞–ª"

@dp.message_handler(lambda msg: msg.text.lower() == "–æ–ø–ª–∞—Ç–∏–≤")
async def confirm_payment(message: types.Message):
    user_id = str(message.from_user.id)

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ
    all_rows = sheet.get_all_values()

    # –®—É–∫–∞—î–º–æ —Ä—è–¥–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    for i, row in enumerate(all_rows, start=1):  # start=1 –±–æ –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        if user_id in row:
            # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ –∫–æ–ª–æ–Ω–∫–∞ "–û–ø–ª–∞—á–µ–Ω–æ" –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ 7-–º—É —Å—Ç–æ–≤–ø—Ü—ñ (G)
            sheet.update_cell(i, 7, "–¢–∞–∫")

            await message.answer(
                "‚úÖ –û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n\n"
                "–û—Å—å —Ç–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π –∫–∞–Ω–∞–ª üëá\n"
                f"{PRIVATE_CHANNEL_LINK}"
            )
            return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π—à–ª–æ
    await message.answer("‚ùå –¢–µ–±–µ —â–µ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ. –ü—Ä–æ–π–¥–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ—é!")


# ===== –°–¢–ê–†–¢ –ë–û–¢–ê =====
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
